class Solution {
public:
    int binary_search(vector<int> nums,int key)
    {
        
        int size = nums.size(),low = 0,high = size-1,mid;
        while(low<=high){
            mid = (high + low)/2;
            if(nums[mid]==key){
                return mid;
            }
            else if(nums[mid]<key){
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return -1;
        
    }
    int search(vector<int>& nums, int target) {
        // int ans = binary_search(nums,target);
        // return ans;
        if (nums.size()==1 && nums[0]== target)return 0;
        else if((nums.size()==1 && nums[0]!= target)) return -1;
        auto it = lower_bound(nums.begin(),nums.end(),target);
        if(*it != target)return -1;
        return it-nums.begin();
    }
};
